#!/usr/bin/env python3

from argparse import ArgumentParser
from bs4 import BeautifulSoup
from bs4.element import Tag
from bs4 import warnings, XMLParsedAsHTMLWarning
import os
import shutil
import re
import copy
import json


warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)

icon_class_regex = re.compile(r"icon-(.*)")
style_elements_to_remove = ["fill", "stroke"]


def directory(value):
    # strip trailing slash from directories
    return value.rstrip("/")


def clean_svg(svg_file):
    """
    Load and clean an svg file, returning the contents

    Args:
        svg_file (str): Path to the svg file to clean

    Returns:
        svg_content (bs4.element.Tag): Parsed contents of the SVG file
    """
    with open(svg_file, "r") as f:
        svg_content = BeautifulSoup(f, "lxml").find("svg")

    for element in ["id", "height", "width"]:
        if element in svg_content.attrs:
            del svg_content.attrs[element]
    svg_content["viewbox"] = "0 0 24 24"

    if "xmlns:svg" in svg_content.attrs:
        del svg_content.attrs["xmlns:svg"]

    for defs_element in svg_content.find_all("defs"):
        defs_element.decompose()

    # remove styles on the element so I can use css
    for element in svg_content.find_all(True):
        if "id" in element.attrs:
            del element.attrs["id"]
        if element.name == "path" and "style" in element.attrs:
            filtered_style = [
                s
                for s in element["style"].split(";")
                if not any(
                    s.startswith(f"{prefix}:") for prefix in style_elements_to_remove
                )
            ]
            element["style"] = ";".join(filtered_style)

    return svg_content


def inject_tarot_data(component, card, card_data):
    """
    Inject tarot data into the tarot component

    Args:
        component (bs4.element.Tag): Tarot component to have data injected into
        card (str): Card identifier
        card_data (dict): Data associated with the given card

    Returns:
        (bs4.element.Tag): Tarot component with data injected
    """
    pip_number = card.split("-")[0]
    if pip_number in [
        "ace",
        "two",
        "three",
        "four",
        "five",
        "six",
        "seven",
        "eight",
        "nine",
        "ten",
        "page",
        "knight",
        "queen",
        "king",
    ]:
        # if this is minor arcana, we'll set the ID to just be the number
        # may need to revisit this if I end up having cards from different suits on the same page
        component["id"] = pip_number
    else:
        component["id"] = card

    for key, value in card_data.items():
        if key == "elements":
            # we'll handle elements separately
            continue
        else:
            replacement = "; ".join(value) if isinstance(value, list) else str(value)

        # replace in contents
        for element in component.find_all(
            string=lambda text: text and f"{{{{ {key} }}}}" in text
        ):
            if key in ["description", "description_reversed"]:
                replacement_html = BeautifulSoup(replacement, "html.parser")
                element.replace_with(replacement_html)
            else:
                element.replace_with(element.replace(f"{{{{ {key} }}}}", replacement))

        # replace in tags
        for tag in component.find_all(True):
            for attr, attr_value in tag.attrs.items():
                if isinstance(attr_value, str) and f"{{{{ {key} }}}}" in attr_value:
                    tag[attr] = attr_value.replace(f"{{{{ {key} }}}}", replacement)

    # ensure there's an icon for each element
    for tag in component.find_all("svg"):
        if "class" in tag.attrs and "{{ elements }}" in " ".join(tag["class"]):
            for element in card_data["elements"]:
                new_svg = copy.copy(tag)
                new_svg["class"] = [f"icon-{element}"]
                tag.insert_before(new_svg)
            # Remove the original template <svg>
            tag.decompose()

    return component


def inject_components(
    template_file, components, target_file, script_src_files, icons, tarot_data
):
    """
    Inject components into template files and write them to the build directory

    Args:
        template_file (str): Path to the template file
        components ({component_name: component_file}): Mapping between target components and their corresponding HTML files
        target_file (str): Path to write the resulting HTML file to
        script_src_files ([str]): Path to all .js files (relative to the nginx root); these will be added as <script> tags to all html files
        icons ({icon_name: icon_contents}): SVG icons to inject
        tarot_data ({card: card_data}): Dict of tarot card data; used to populate tarot components
    """
    with open(template_file, "r") as f:
        template_content = f.read()
    template_soup = BeautifulSoup(template_content, "html.parser")

    # If a component is found in the template, load it and replace the target div with it
    for component_name, component_file in components.items():
        template_component_divs = template_soup.find_all(id=component_name)
        for template_component_div in template_component_divs:
            with open(component_file, "r") as f:
                component_content = f.read()
            component_soup = BeautifulSoup(component_content, "html.parser")
            component_top_level_divs = component_soup.body.find_all(
                "div", recursive=False
            )
            if len(component_top_level_divs) > 1 or len(component_top_level_divs) == 0:
                raise SystemExit(
                    f"Expected a single top-level div for component {component_name} ({component_file})"
                )
            else:
                component_top_level_div = component_top_level_divs[0]

                if component_name == "tarot-card":
                    classes = template_component_div.get("class", [])
                    if len(classes) != 1:
                        raise SystemExit(
                            f"Expected exactly one class on the tarot-card selector; got {classes}\nOffending file was {template_file}"
                        )
                    else:
                        card = classes[0]
                        if card not in tarot_data:
                            raise SystemExit(
                                f"Tarot card {card} not found in tarot data"
                            )

                        card_component = inject_tarot_data(
                            component_top_level_div, card, tarot_data[card]
                        )
                        template_component_div.replace_with(card_component)
                else:
                    template_component_div.clear()

                    for child in component_top_level_div.children:
                        if isinstance(child, Tag):
                            template_component_div.append(child)

    # Add scripts
    template_body = template_soup.find("body")
    for script_src_file, targets in script_src_files.items():
        if os.path.basename(template_file) in targets:
            script_tag = template_soup.new_tag("script", src=script_src_file)
            template_body.append(script_tag)

    # Add icons
    if len(icons) != 0:
        template_icon_elements = template_soup.body.find_all(class_=icon_class_regex)
        for el in template_icon_elements:
            class_list = el.get("class", [])
            if "icon" not in class_list:
                class_list.append("icon")
            matching_classes = [
                match.group(1)
                for c in class_list
                if (match := icon_class_regex.search(c))
            ]
            if len(matching_classes) != 1:
                raise SystemExit(
                    f"Expected exactly one icon class (icon-) prefix, got:\n{matching_classes}"
                )
            else:
                icon_name = matching_classes[0]

            if icon_name not in icons:
                raise SystemExit(
                    f"Icon {icon_name} not found in icons directory (is it named {icon_name}.svg? -/_ do not matter in naming.)"
                )
            else:
                icon_content = copy.deepcopy(icons[icon_name])
                icon_content["class"] = class_list
                el.replace_with(icon_content)

    with open(target_file, "w") as f:
        f.write(template_soup.prettify())


def main(args):
    # component_name: component_file
    components = {}

    # icon_name: icon_contents (bs4.element.Tag)
    icons = {}

    # [{source_file: source_file, target_file: target_file}]
    files = []

    # {card_name: name, suit, elements, img, keywords, keywords_reversed, desription, description_reversed}
    tarot_data = {}

    for source_dir, _, filenames in os.walk(args.src_directory):
        for fname in filenames:
            # html files in the components directory are added to components; otherwise, they're copied over as normal
            if source_dir.startswith(args.components_directory) and fname.endswith(
                ".html"
            ):
                component_name = fname.replace(".html", "")
                component_file = os.path.join(source_dir, fname)
                if component_name in components:
                    raise SystemExit(
                        f"Detected two components with the same name at different paths:\n\t{component_file}\n\t{components['component_name']}\nPlease rename one of these components."
                    )
                else:
                    components[component_name] = component_file
            # icons
            elif (
                args.icons_directory is not None
                and source_dir.startswith(args.icons_directory)
                and fname.endswith(".svg")
            ):
                icon_name = fname.replace(".svg", "").replace("_", "-")
                if icon_name not in icons:
                    icon_file = os.path.join(source_dir, fname)
                    icon_content = clean_svg(icon_file)
                    icons[icon_name] = icon_content
                else:
                    raise SystemExit(f"Duplicate icon name {icon_name} found")
            elif fname == "tarot.json":
                with open(os.path.join(source_dir, fname), "r") as f:
                    tarot_data = json.load(f)
            else:
                relpath = os.path.join(
                    source_dir.replace(args.src_directory, ""), fname
                )

                files.append(
                    {
                        "source_file": os.path.join(source_dir, fname),
                        "target_file": os.path.join(
                            args.build_directory, relpath.lstrip("/")
                        ),
                        "relpath": relpath,
                    }
                )

    html_files = [
        os.path.basename(file["source_file"])
        for file in files
        if file["source_file"].endswith(".html")
    ]

    # {src_file_relpath: [html_page_targets]}
    script_src_files = {}
    for file in files:
        file_relpath = file["relpath"]
        if file["source_file"].endswith(".js"):
            with open(file["source_file"], "r") as f:
                first_line = f.readline().strip()
            if first_line.startswith("// targets"):
                targets = first_line.split(" ")[2:]
                if len(targets) == 0:
                    raise SystemExit(
                        f"// targets comment found but no targets selected for file {file['source_file']}\nRemove \\ targets comment to target JS file to all HTML files"
                    )
            else:
                targets = html_files

            if file_relpath in script_src_files:
                raise SystemExit(
                    f"Detected two scripts with the same name but different paths: {file_relpath}"
                )
            else:
                script_src_files[file_relpath] = targets

    for file in files:
        source_file = file["source_file"]
        target_file = file["target_file"]
        os.makedirs(os.path.dirname(target_file), exist_ok=True)
        if source_file.endswith(".html"):
            inject_components(
                source_file,
                components,
                target_file,
                script_src_files,
                icons,
                tarot_data,
            )
        else:
            shutil.copy(source_file, target_file)


if __name__ == "__main__":
    parser = ArgumentParser(
        description="Inject components into template HTML files, and copy other assets to the build directory"
    )

    parser.add_argument(
        "-s",
        "--src-directory",
        type=directory,
        help="Source directory to search for template HTML files to build",
        required=True,
    )

    parser.add_argument(
        "-c",
        "--components-directory",
        type=directory,
        help="Directory of components to use to insert into the HTML template files",
        required=True,
    )

    parser.add_argument(
        "-i",
        "--icons-directory",
        type=directory,
        help="Directory containing icons in SVG format",
        required=False,
    )

    parser.add_argument(
        "-b",
        "--build-directory",
        type=directory,
        help="Directory to write built HTML to; will mirror the structure found in the --src-directory",
        required=True,
    )

    args = parser.parse_args()
    main(args)
